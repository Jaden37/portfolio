(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{128:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),l=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),p=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},u=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,m=d["".concat(r,".").concat(u)]||d[u]||b[u]||o;return t?l.a.createElement(m,s(s({ref:n},c),{},{components:t})):l.a.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},187:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/queries_labels-0651b831bd3a03739d52d46475fff165.png"},91:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var a=t(3),l=t(7),o=(t(0),t(128)),r={id:"5_2_Labels",title:"Labels"},s={unversionedId:"Kubernetes/2_management_APIServer_&_Pod/5_2_Labels",id:"Kubernetes/2_management_APIServer_&_Pod/5_2_Labels",isDocsHomePage:!1,title:"Labels",description:"Les labels sont utilis\xe9 pour organiser des resources :",source:"@site/docs/Kubernetes/2_management_APIServer_&_Pod/5_2_Labels.md",slug:"/Kubernetes/2_management_APIServer_&_Pod/5_2_Labels",permalink:"/docs/Kubernetes/2_management_APIServer_&_Pod/5_2_Labels",editUrl:"https://github.com/j-peguet/portfolio/blob/master/docs/Kubernetes/2_management_APIServer_&_Pod/5_2_Labels.md",version:"current",sidebar:"docs",previous:{title:"Namespaces",permalink:"/docs/Kubernetes/2_management_APIServer_&_Pod/5_1_Namespaces"},next:{title:"Annotations",permalink:"/docs/Kubernetes/2_management_APIServer_&_Pod/5_3_Annotations"}},i=[{value:"D\xe9finir des fichiers de d\xe9ploiement et de service",id:"d\xe9finir-des-fichiers-de-d\xe9ploiement-et-de-service",children:[]},{value:"Commands",id:"commands",children:[{value:"Kubernetes Resource Management",id:"kubernetes-resource-management",children:[]},{value:"Remove a pod from load balancing",id:"remove-a-pod-from-load-balancing",children:[]},{value:"Scheduling a pod to a node",id:"scheduling-a-pod-to-a-node",children:[]}]}],c={toc:i};function p(e){var n=e.components,r=Object(l.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Les labels sont utilis\xe9 pour organiser des resources :"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Used to organize resources - Pods, Nodes and more"),Object(o.b)("li",{parentName:"ul"},"Label Selectors are used to select/query Objects"),Object(o.b)("li",{parentName:"ul"},"Return collections of Objects that satisfy search conditions"),Object(o.b)("li",{parentName:"ul"},"Enables you to perform operations on a collection of resources...like Pods"),Object(o.b)("li",{parentName:"ul"},"Influence internal operations of Kubernetes")),Object(o.b)("p",null,"What is a label ?"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Non-hierarchical, key/value pair"),Object(o.b)("li",{parentName:"ul"},"Object can have more than one label per resource"),Object(o.b)("li",{parentName:"ul"},"Enables more complex representations of state and ability to query"),Object(o.b)("li",{parentName:"ul"},"Keys can be 63 characters or less"),Object(o.b)("li",{parentName:"ul"},"Values can be 253 characters or less")),Object(o.b)("p",null,"Comment utiliser des labels"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Creating resources with Labels",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Imperatively with kubectl")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Add a label to a resource\nkubectl label pod nginx tier=PROD app=v1\n#Modify a label\nkubectl label pod nginx tier=DEBUG app=v1 --overwrite\n#Remove a label from a resource\nkubectl label pod nginx app-\n")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Declaratively in a Manifest in YAML")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels\n    app: v1\n    tier: PROD\nspec:\n  ...\n"))),Object(o.b)("li",{parentName:"ul"},"Editing existing resources\u2019 Labels",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Assign (add) a new Label"),Object(o.b)("li",{parentName:"ul"},"Overwriting an existing Label")))),Object(o.b)("p",null,Object(o.b)("img",{alt:"queries labels",src:t(187).default})),Object(o.b)("p",null,"Comment Kubernetes utilise les labels"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Controllers and Services match Pods using selectors"),Object(o.b)("li",{parentName:"ul"},"Influencing Pod Scheduling"),Object(o.b)("li",{parentName:"ul"},"Scheduling to specific Nodes - permet de d\xe9finir un label pour que le service associ\xe9 soit d\xe9ploy\xe9 uniquement sur une node"),Object(o.b)("li",{parentName:"ul"},"Special hardware (SSD or GPU)"),Object(o.b)("li",{parentName:"ul"},"Using a label selector")),Object(o.b)("h2",{id:"d\xe9finir-des-fichiers-de-d\xe9ploiement-et-de-service"},"D\xe9finir des fichiers de d\xe9ploiement et de service"),Object(o.b)("p",null,'Il est important que les "run" soit le m\xeame dans le "matchLabels" et dans le "metadata"'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"kind: Deployment\n...\nspec:\n  selector:\n    matchLabels:\n      run: hello-world\n...\n  template:\n    metadata:\n      labels:\n        run: hello-world\n    spec:\n      containers:\n...\n")),Object(o.b)("p",null,'Idem, il est important que le "selector" comporte le m\xeame label'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"kind: Service\n...\nspec:\n  selector:\n    run: hello-world\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 8080\n")),Object(o.b)("h2",{id:"commands"},"Commands"),Object(o.b)("p",null,"Cr\xe9er une fichier 'CreatePodsWithLabels.yaml'"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-1\n  labels: \n    app: MyWebApp\n    deployment: v1\n    tier: prod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-2\n  labels: \n    app: MyWebApp\n    deployment: v1.1\n    tier: prod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-3\n  labels: \n    app: MyWebApp\n    deployment: v1.1\n    tier: qa\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-4\n  labels: \n    app: MyAdminApp\n    deployment: v1\n    tier: prod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n---\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Create a collection of pods with labels assinged to each\ncat CreatePodsWithLabels.yaml\nkubectl apply -f CreatePodsWithLabels.yaml\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Look at all the Pod labels in our cluster\nkubectl get pods --show-labels\n\n#Look at one Pod's labels in our cluster\nkubectl describe pod nginx-pod-1 | head\n\n#Query labels and selectors\nkubectl get pods --selector tier=prod\nkubectl get pods --selector tier=qa\nkubectl get pods -l tier=prod\nkubectl get pods -l tier=prod --show-labels\n\n#Selector for multiple labels and adding on show-labels to see those labels in the output\nkubectl get pods -l 'tier=prod,app=MyWebApp' --show-labels\nkubectl get pods -l 'tier=prod,app!=MyWebApp' --show-labels\nkubectl get pods -l 'tier in (prod,qa)'\nkubectl get pods -l 'tier notin (prod,qa)'\n\n#Output a particluar label in column format\nkubectl get pods -L tier\nkubectl get pods -L tier,app\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Edit an existing label\nkubectl label pod nginx-pod-1 tier=non-prod --overwrite\n\n#Adding a new label\nkubectl label pod nginx-pod-1 another=Label\n\n#Removing an existing label\nkubectl label pod nginx-pod-1 another-\n\n#Performing an operation on a collection of pods based on a label query\nkubectl label pod --all tier=non-prod --overwrite\n\n#Delete all pods matching our non-prod label\nkubectl delete pod -l tier=non-prod\n")),Object(o.b)("p",null,"Un exemple plus complexe, cr\xe9ation de deux fichiers: "),Object(o.b)("p",null,"deployment-label.yaml"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-world\n  labels:\n    app: hello-world\nspec:\n  replicas: 4\n  selector:\n    matchLabels:\n      app: hello-world\n  template:\n    metadata:\n      labels:\n        app: hello-world\n    spec:\n      containers:\n      - name: hello-world\n        image: gcr.io/google-samples/hello-app:1.0\n        ports:\n        - containerPort: 8080\n")),Object(o.b)("p",null,"et service.yaml"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: hello-world\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app: hello-world\n")),Object(o.b)("h3",{id:"kubernetes-resource-management"},"Kubernetes Resource Management"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Start a Deployment with 4 replicas\nkubectl apply -f deployment-label.yaml\n\n#Expose our Deployment as Service\nkubectl apply -f service.yaml\n\n#Look at the Labels and Selectors on each resource, the Deployment, ReplicaSet and Pod\n#The deployment has a selector for app=hello-world\nkubectl describe deployment hello-world\n\n#The ReplicaSet has labels and selectors for app and the current pod-template-hash\n#Look at the Pod Template and the labels on the Pods created\nkubectl describe replicaset hello-world\n\n#The Pods have labels for app=hello-world and for the pod-template-hash of the current ReplicaSet\nkubectl get pods --show-labels\n\n#Edit the label on one of the Pods in the ReplicaSet, change the pod-template-hash\nkubectl label pod PASTE_POD_NAME_HERE pod-template-hash=DEBUG --overwrite\n\n#The ReplicaSet will deploy a new Pod to satisfy the number of replicas. Our relabeled Pod still exists.\nkubectl get pods --show-labels\n")),Object(o.b)("h3",{id:"remove-a-pod-from-load-balancing"},"Remove a pod from load balancing"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Let's look at how Services use labels and selectors, check out services.yaml\nkubectl get service\n\n#The selector for this serivce is app=hello-world, that pod is still being load balanced to!\nkubectl describe service hello-world \n\n#Get a list of all IPs in the service, there's 5...why?\nkubectl describe endpoints hello-world\n\n#Get a list of pods and their IPs\nkubectl get pod -o wide\n\n#To remove a pod from load balancing, change the label used by the service's selector.\n#The ReplicaSet will respond by placing another pod in the ReplicaSet\nkubectl get pods --show-labels\nkubectl label pod PASTE_POD_NAME_HERE app=DEBUG --overwrite\n\n#Check out all the labels in our pods\nkubectl get pods --show-labels\n\n#Look at the registered endpoint addresses. Now there's 4\nkubectl describe endpoints hello-world\n\n#To clean up, delete the deployment, service and the Pod removed from the replicaset\nkubectl delete deployment hello-world\nkubectl delete service hello-world\nkubectl delete pod PASTE_POD_NAME_HERE\n")),Object(o.b)("h3",{id:"scheduling-a-pod-to-a-node"},"Scheduling a pod to a node"),Object(o.b)("p",null,"Just before, create the file PodsToNodes.yaml"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-ssd\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n  nodeSelector:\n    disk: local_ssd\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-gpu\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n  nodeSelector:\n    hardware: local_gpu\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"#Scheduling is a much deeper topic, we're focusing on how labels can be used to influence it here.\nkubectl get nodes --show-labels \n\n#Label our nodes with something descriptive\nkubectl label node c1-node1 disk=local_ssd\nkubectl label node c1-node2 hardware=local_gpu\n\n#Query our labels to confirm.\nkubectl get node -L disk,hardware\n\n#Create three Pods, two using nodeSelector, one without.\ncat PodsToNodes.yaml\nkubectl apply -f PodsToNodes.yaml\n\n#View the scheduling of the pods in the cluster.\nkubectl get node -L disk,hardware\nkubectl get pods -o wide\n\n#Clean up when we're finished, delete our labels and Pods\nkubectl label node c1-node1 disk-\nkubectl label node c1-node2 hardware-\nkubectl delete pod nginx-pod\nkubectl delete pod nginx-pod-gpu\nkubectl delete pod nginx-pod-ssd\n")))}p.isMDXComponent=!0}}]);