(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{125:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||l;return t?r.a.createElement(m,i(i({ref:n},s),{},{components:t})):r.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},95:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),l=(t(0),t(125)),o={id:"5_1_Env_variables",title:"Environment Variables"},i={unversionedId:"Kubernetes/3_kubernetes_storage_&_scheduling/5_1_Env_variables",id:"Kubernetes/3_kubernetes_storage_&_scheduling/5_1_Env_variables",isDocsHomePage:!1,title:"Environment Variables",description:"They are two types of environment variables",source:"@site/docs\\Kubernetes\\3_kubernetes_storage_&_scheduling\\5_1_Env_variables.md",slug:"/Kubernetes/3_kubernetes_storage_&_scheduling/5_1_Env_variables",permalink:"/docs/Kubernetes/3_kubernetes_storage_&_scheduling/5_1_Env_variables",editUrl:"https://github.com/Jaden37/portfolio/blob/master/docs/Kubernetes/3_kubernetes_storage_&_scheduling/5_1_Env_variables.md",version:"current",sidebar:"docs",previous:{title:"Why did we need Configuration as Data ?",permalink:"/docs/Kubernetes/3_kubernetes_storage_&_scheduling/5_0_Pods_with_env"},next:{title:"Secrets",permalink:"/docs/Kubernetes/3_kubernetes_storage_&_scheduling/5_2_Secrets"}},c=[{value:"Defining Environment Variables",id:"defining-environment-variables",children:[]},{value:"Demo",id:"demo",children:[]}],s={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"They are two types of environment variables"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"User Defined",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Pod Spec for each container"),Object(l.b)("li",{parentName:"ul"},"Defined inside the container image"),Object(l.b)("li",{parentName:"ul"},"Defined in name/value or valueFrom"))),Object(l.b)("li",{parentName:"ul"},"System Defined",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Names of all Services available at the time the Pod was created"),Object(l.b)("li",{parentName:"ul"},"Defined at container startup"),Object(l.b)("li",{parentName:"ul"},"They can't be updated once the Pod is created")))),Object(l.b)("h2",{id:"defining-environment-variables"},"Defining Environment Variables"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-yaml"},'spec:\n    containers:\n    - name: hello-world\n      image: gcr.io/google-samples/hello-app:1.0\n      env:\n      - name: DATABASE_SERVERNAME\n        value: "sql.example.local"\n      - name: BACKEND_SERVERNAME\n        value: \u201cbe.example.local"\n')),Object(l.b)("h2",{id:"demo"},"Demo"),Object(l.b)("p",null,"Passing environments variables in our containers\nLet's create 2 files deployment-alpha.yaml & deployment-beta.yaml (replace only alpha by beta)"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-world-alpha\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-world-alpha\n  template:\n    metadata:\n      labels:\n        app: hello-world-alpha\n    spec:\n      containers:\n      - name: hello-world\n        image: gcr.io/google-samples/hello-app:1.0\n        env:\n        - name: DATABASE_SERVERNAME\n          value: "sql.example.local"\n        - name: BACKEND_SERVERNAME\n          value: "be.example.local"\n        ports:\n        - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-world-alpha\nspec:\n  selector:\n    app: hello-world-alpha\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: ClusterIP\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"#Create two deployments, one for a database system and the other our application.\n#I'm putting a little wait in there so the Pods are created one after the other.\nkubectl apply -f deployment-alpha.yaml\nsleep 5\nkubectl apply -f deployment-beta.yaml\n\n#Let's look at the services\nkubectl get service\n")),Object(l.b)("p",null,"Create a local variables with the name of the Pod"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"#Now let's get the name of one of our pods\nPODNAME=$(kubectl get pods | grep hello-world-alpha | awk '{print $1}' | head -n 1)\necho $PODNAME\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"#Inside the Pod, let's read the enviroment variables from our container\n#Notice the alpha information is there but not the beta information. Since beta wasn't defined when the Pod started.\nkubectl exec -it $PODNAME -- /bin/sh \nprintenv | sort\nexit\n\n#If you delete the pod and it gets recreated, you will get the variables for the alpha and beta service information.\nkubectl delete pod $PODNAME\n\n#Get the new pod name and check the environment variables...the variables are define at Pod/Container startup.\nPODNAME=$(kubectl get pods | grep hello-world-alpha | awk '{print $1}' | head -n 1)\nkubectl exec -it $PODNAME -- /bin/sh -c \"printenv | sort\"\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'#If we delete our service and deployment \nkubectl delete deployment hello-world-beta\nkubectl delete service hello-world-beta\n\n#The enviroment variables stick around...to get a new set, the pod needs to be recreated.\nkubectl exec -it $PODNAME -- /bin/sh -c "printenv | sort"\n\n#Let\'s clean up after our demo\nkubectl delete -f deployment-alpha.yaml\n')))}p.isMDXComponent=!0}}]);